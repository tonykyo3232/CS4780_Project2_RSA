import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Hashtable;

/****************************************************
* RSADecrypt.java
* Decrypts a file
****************************************************/

/*
	Instruction:
	you will write a program to decrypt the encrypted file that has been generated by the encryption procedure described earlier.
	The decryption algorithm should be runnable from a file named "RSADecrypt.java" (that is, this
	file should have the main method). The program will be called with the input encrypted file and
	the key file as arguments. The key file will be in the same format as described previously.
	The program will be invoked as:
	c:\> java RSADecrypt test.enc pri_key.txt
	where test.enc is the name of the file to be decrypted. The decrypted file that the program generates should be named "test.dec".
*/

public class RSADecrypt {

	// 00-26 encoding scheme
	public static Hashtable<String, String> letter_table = new Hashtable<String, String>();

    private static void insert_letters(){
    	letter_table.put("00", "A");
    	letter_table.put("01", "B");
    	letter_table.put("02", "C");
    	letter_table.put("03", "D");
    	letter_table.put("04", "E");
    	letter_table.put("05", "F");
    	letter_table.put("06", "G");
    	letter_table.put("07", "H");
    	letter_table.put("08", "I");
    	letter_table.put("09", "J");
    	letter_table.put("10", "K");
    	letter_table.put("11", "L");
    	letter_table.put("12", "M");
    	letter_table.put("13", "N");
    	letter_table.put("14", "O");
    	letter_table.put("15", "P");
    	letter_table.put("16", "Q");
    	letter_table.put("17", "R");
    	letter_table.put("18", "S");
    	letter_table.put("19", "T");
    	letter_table.put("20", "U");
    	letter_table.put("21", "V");
    	letter_table.put("22", "W");
    	letter_table.put("23", "X");
    	letter_table.put("24", "Y");
        letter_table.put("25", "Y");
        letter_table.put("26", " ");
        letter_table.put("27", ",");
        letter_table.put("28", ".");
        letter_table.put("29", "\n");
    }

	private static String readFile(String fileName){
		String content = "";
		try{
            content = Files.readString(Path.of(fileName));
        } 
        catch (IOException e){
            e.printStackTrace();
        }
        return content;
	}

	private static void writeFile(String fileName, String content) throws IOException {
		try{
		      FileWriter myWriter = new FileWriter(fileName, true);
		      myWriter.write(content);
		      myWriter.close();
		 } 
		catch (IOException e) {
		      e.printStackTrace();
		 }	
	}

	// return e
	private static String getD(String message){

		String d = "";
		// base case: when e is 1 digit
		for(int i = 4; i < message.length(); i++){
			String temp = Character.toString(message.charAt(i));
			if(isNumber(temp)){
				d += temp;
			} else{
				break;
			}
		}
		return d;
	}

	// return d
	private static String getN(String message, String d){
		String d_str = "d = " + d;
		String n_str = message.substring(d_str.length() + 1);
		String n = "";
		for(int i = 4; i < n_str.length(); i++){
			String temp = Character.toString(n_str.charAt(i));
			if(isNumber(temp)){
				n += temp;
			} else{
				break;
			}
		}
		return n;
	}

	// helper function - isNumber
	// check if the value is type of int
	private static boolean isNumber(String str) { 
	  	try {  
	    	Integer.parseInt(str);  
	    	return true;
	  	} 
	  	catch(NumberFormatException e){  
	    	return false;  
	  	}  
	}

	/*
		block size of 3 bytes
		use 00 - 26 encoding scheme (26 for space)
		P = C^d mod n
	*/
	private static void decrypt(String message, String d_str, String n_str) throws IOException{

		BigInteger ciperText, plaintext;
		BigInteger d = new BigInteger(d_str);
		BigInteger n = new BigInteger(n_str);

		// note: when convert from string to int, the 0's on the left will disappear
		// need to check the number of digits when doing decryption
		ciperText = new BigInteger(message);
		plaintext = ciperText.modPow(d,n);
		writeFile("test.dec", num_to_string(plaintext.toString()));

		// System.out.println("plaintext is:" + plaintext);
		// System.out.println("ciperText is:" + ciperText);
	}


	// convert string of number into string of characters
	private static String num_to_string(String plaintext){
		
		String result = "",
			   symbol_1 = "",
			   symbol_2 = "",
			   symbol_3 = "";

	    // for the case 00, 01, ...09 
		if(plaintext.length() != 6){
			plaintext  = "0" + plaintext;
		}

		if(plaintext.length() == 5){
			plaintext  = "0" + plaintext;
		}
		
		symbol_1 += Character.toString(plaintext.charAt(0));
		symbol_1 += Character.toString(plaintext.charAt(1));
		symbol_2 += Character.toString(plaintext.charAt(2));
		symbol_2 += Character.toString(plaintext.charAt(3));
		symbol_3 += Character.toString(plaintext.charAt(4));
		symbol_3 += Character.toString(plaintext.charAt(5));
		
		result = letter_table.get(symbol_1) + letter_table.get(symbol_2) + letter_table.get(symbol_3);
		return result;
	}


	/*
		args[0]: test.enc
		args[1]: pri_key.txt
	*/
	public static void main(String[] args) throws IOException {
		// insert letters into hash table
		insert_letters();

		if(args.length == 2){
			String msg1 = readFile(args[0]);
			String msg2 = readFile(args[1]);
			String d = getD(msg2);
			String n = getN(msg2, d);
			
			String blocks[] = msg1.split(" ");
			for(int i  = 0; i < blocks.length; i++){
				decrypt(blocks[i], d, n);
			}
			System.out.println("Message decrypted...");			
		}
		else{
			// exception
			System.out.println("Invalid arguement for RSADecrypt!");	
			System.exit(0);
		}
	}
}